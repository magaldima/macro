// Code generated by lister-gen. DO NOT EDIT.

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/magaldima/macro/pkg/apis/microservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MicroServiceLister helps list MicroServices.
type MicroServiceLister interface {
	// List lists all MicroServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MicroService, err error)
	// MicroServices returns an object that can list and get MicroServices.
	MicroServices(namespace string) MicroServiceNamespaceLister
	MicroServiceListerExpansion
}

// microServiceLister implements the MicroServiceLister interface.
type microServiceLister struct {
	indexer cache.Indexer
}

// NewMicroServiceLister returns a new MicroServiceLister.
func NewMicroServiceLister(indexer cache.Indexer) MicroServiceLister {
	return &microServiceLister{indexer: indexer}
}

// List lists all MicroServices in the indexer.
func (s *microServiceLister) List(selector labels.Selector) (ret []*v1alpha1.MicroService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MicroService))
	})
	return ret, err
}

// MicroServices returns an object that can list and get MicroServices.
func (s *microServiceLister) MicroServices(namespace string) MicroServiceNamespaceLister {
	return microServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MicroServiceNamespaceLister helps list and get MicroServices.
type MicroServiceNamespaceLister interface {
	// List lists all MicroServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MicroService, err error)
	// Get retrieves the MicroService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MicroService, error)
	MicroServiceNamespaceListerExpansion
}

// microServiceNamespaceLister implements the MicroServiceNamespaceLister
// interface.
type microServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MicroServices in the indexer for a given namespace.
func (s microServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MicroService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MicroService))
	})
	return ret, err
}

// Get retrieves the MicroService from the indexer for a given namespace and name.
func (s microServiceNamespaceLister) Get(name string) (*v1alpha1.MicroService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("microservice"), name)
	}
	return obj.(*v1alpha1.MicroService), nil
}
